import streamlit as st
import requests

st.set_page_config(page_title="AI Story Generator", page_icon="📖", layout="wide")

API_URL = "https://openrouter.ai/api/v1/chat/completions"
API_TOKEN = st.secrets["api_token"]

headers = {
    "Authorization": f"Bearer {API_TOKEN}",
    "Content-Type": "application/json",
    "HTTP-Referer": "https://chat.openai.com",
    "X-Title": "AI Story Generator"
}

def query(payload):
    response = requests.post(API_URL, headers=headers, json=payload)
    if response.status_code == 200:
        return response.json()
    else:
        try:
            return {"error": f"Request failed with status code {response.status_code}: {response.json().get('error','')}"}
        except:
            return {"error": f"Request failed with status code {response.status_code}"}

def generate_story(prompt, genre):
    full_prompt = f"Write a {genre} short story based on this prompt: {prompt}"
    output = query({
        "model": "deepseek/deepseek-r1:free",
        "messages": [
            {"role": "system", "content": "You are a creative story writer."},
            {"role": "user", "content": full_prompt}
        ],
        "temperature": 0.7
    })
    if "error" in output:
        return output["error"]
    else:
        return output['choices'][0]['message']['content']

def main():
    st.title("📖 AI Story Generator")
    st.markdown(
        "<h4 style='text-align: center; color: #4B8BBE;'>Enter a creative prompt and get a magical story generated by AI!</h4>",
        unsafe_allow_html=True
    )

    with st.sidebar:
        st.header("🎯 How to Use")
        st.write("""
        - Enter a creative story prompt in the main input box.
        - Select a genre to style the story.
        - Click *Generate Story* and wait a moment.
        - Your story will appear below.
        - Use *Copy* or *Download* buttons to save it.
        """)
        st.markdown("---")
        st.header("🧙‍♂ Select Genre")
        genre = st.selectbox("Choose a story genre:", 
                             ["Fantasy", "Science Fiction", "Mystery", "Adventure", "Romance", "Horror", "Comedy", "Historical"])

    prompt = st.text_area("📝 Enter your story prompt here:", height=120)

    if "story_history" not in st.session_state:
        st.session_state["story_history"] = []

    col1, col2 = st.columns([1, 1])
    with col1:
        generate_clicked = st.button("✨ Generate Story")
    with col2:
        clear_history_clicked = st.button("🗑 Clear History")

    if generate_clicked:
        if prompt.strip() == "":
            st.warning("⚠ Please enter a valid prompt before generating.")
        else:
            with st.spinner("🔮 Crafting your story..."):
                story = generate_story(prompt, genre)
                if story.startswith("Request failed") or story.startswith("error"):
                    st.error(f"❌ {story}")
                else:
                    st.success("🎉 Here is your AI-generated story:")
                    st.markdown(f"<div style='white-space: pre-line; font-size: 16px;'>{story}</div>", unsafe_allow_html=True)
                    st.session_state["story_history"].insert(0, {"prompt": prompt, "genre": genre, "story": story})
                    st.download_button("💾 Download Story", story, file_name="AI_Story.txt")

    if clear_history_clicked:
        st.session_state["story_history"] = []
        st.experimental_rerun()

    if st.session_state.get("story_history"):
        st.markdown("---")
        st.subheader("🗂 Generated Story History")
        for i, entry in enumerate(st.session_state["story_history"]):
            with st.expander(f"Story #{i+1} — {entry['genre']}"):
                st.markdown(f"*Prompt:* {entry['prompt']}")
                st.markdown(f"*Story:*\n\n{entry['story']}")

    st.markdown("---")
    st.markdown("<p style='text-align:center; font-size:12px; color:gray;'>Created by Harish – B.Tech CSE (Information Security), VIT Vellore</p>", unsafe_allow_html=True)

if __name__ == "__main__":
    main()
